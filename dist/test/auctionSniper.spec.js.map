{"version":3,"sources":["auctionSniper.spec.js"],"names":[],"mappings":"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","file":"auctionSniper.spec.js","sourcesContent":["require('source-map-support').install();\nvar sinon = require('sinon');\nvar assert = require('chai').assert;\nimport {AuctionSniper, PriceSource} from '../src/AuctionSniper';\nvar Auction = require('../src/Auction');\n\ndescribe('auction sniper test', () =>{\n\tvar sniper;\n\tvar sniperListener;\n\tvar auction;\n\tvar sniperState;\n\tbeforeEach('',() => {\n\t\tsniperListener = {\n\t\t\tsniperLost : sinon.spy(),\n\t\t\tsniperWon : sinon.spy(),\n\t\t\tsniperBidding : sinon.spy(),\n\t\t\tsniperWinning : sinon.spy()\n\t\t};\n\t\tauction = {\n\t\t\tbid : sinon.spy()\n\t\t};\n\t\tsniper = new AuctionSniper(auction, sniperListener);\n\t\tsniperState = null;\n\t});\n\n\tit('reports lost when auction closes immediately', () => {\n\t\tsniper.auctionClosed();\n\t\tassert(sniperListener.sniperLost.called, 'sniperListener.sniperLost not called at least once');\n\t});\n\n\tit('bids higher and reports bidding when new price arrives', () => {\n\t\tlet price = 1001;\n\t\tlet increment = 25;\n\t\tsniper.currentPrice(price, increment, PriceSource.fromOtherBidder);\n\t\tassert(auction.bid.calledOnce, 'auction.bid not called once');\n\t\tassert(auction.bid.calledWith(price + increment), 'auction.bid not called with '+price+','+increment);\n\t\tassert(sniperListener.sniperBidding.called, 'sniperListener.sniperBidding not called at least once');\n\t});\n\n\tit('reports is winning when current price comes from sniper', () => {\n\t\tsniper.currentPrice(123, 45, PriceSource.fromSniper);\n\t\tassert(sniperListener.sniperWinning.calledOnce, 'sniperListener.sniperWinning not called once');\n\t});\n\n\tit('reports lost if auction closes when bidding', () => {\n\t\tsniper.currentPrice(123, 45, PriceSource.fromOtherBidder);\n\t\tsniper.auctionClosed();\n\t\tsniperState = \"bidding\"; //TODO: Update from sniper...\n\t\tassert.equal(sniperState, \"bidding\", \"sniper state mismatch\")\n\t\tassert(sniperListener.sniperLost.called, 'sniperListener.sniperLost not called at least once');\n\t});\n\n\tit('reports won if auction closes when winning', () => {\n\t\tsniper.currentPrice(123, 45, PriceSource.fromSniper);\n\t\tsniper.auctionClosed();\n\t\tsniperState = \"winning\"; //TODO: Update from sniper...\n\t\tassert.equal(sniperState, \"winning\", \"sniper state mismatch\")\n\t\tassert(sniperListener.sniperWon.called, 'sniperListener.sniperWon not called at least once');\n\t});\n});"],"sourceRoot":"/source/"}