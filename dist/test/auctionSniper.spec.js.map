{"version":3,"sources":["auctionSniper.spec.js"],"names":[],"mappings":";;AAAA,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,EAAE,CAAC;AACxC,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC7B,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;AACpC,IAAI,aAAa,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC,aAAa,CAAC;AAClE,IAAI,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;;AAExC,QAAQ,CAAC,qBAAqB,EAAE,YAAK;AACpC,KAAI,MAAM,CAAC;AACX,KAAI,cAAc,CAAC;AACnB,KAAI,OAAO,CAAC;AACZ,OAAM,CAAC,EAAE,EAAC,YAAM;AACf,gBAAc,GAAG;AAChB,aAAU,EAAG,KAAK,CAAC,GAAG,EAAE;AACxB,gBAAa,EAAG,KAAK,CAAC,GAAG,EAAE;GAC3B,CAAC;AACF,SAAO,GAAG;AACT,MAAG,EAAG,KAAK,CAAC,GAAG,EAAE;GACjB,CAAC;AACF,QAAM,GAAG,IAAI,aAAa,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;EACpD,CAAC,CAAC;;AAEH,GAAE,CAAC,kCAAkC,EAAE,YAAM;AAC5C,QAAM,CAAC,aAAa,EAAE,CAAC;AACvB,QAAM,CAAC,cAAc,CAAC,UAAU,CAAC,UAAU,EAAE,2CAA2C,CAAC,CAAC;EAC1F,CAAC,CAAC;;AAEH,GAAE,CAAC,wDAAwD,EAAE,YAAM;AAClE,MAAI,KAAK,GAAG,IAAI,CAAC;AACjB,MAAI,SAAS,GAAG,EAAE,CAAC;AACnB,QAAM,CAAC,YAAY,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AACtC,QAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,6BAA6B,CAAC,CAAC;AAC9D,QAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,GAAG,SAAS,CAAC,EAAE,8BAA8B,GAAC,KAAK,GAAC,GAAG,GAAC,SAAS,CAAC,CAAC;AACtG,QAAM,CAAC,cAAc,CAAC,aAAa,CAAC,MAAM,EAAE,uDAAuD,CAAC,CAAC;EACrG,CAAC,CAAC;CACH,CAAC,CAAC","file":"auctionSniper.spec.js","sourcesContent":["require('source-map-support').install();\nvar sinon = require('sinon');\nvar assert = require('chai').assert;\nvar AuctionSniper = require('../src/AuctionSniper').AuctionSniper;\nvar Auction = require('../src/Auction');\n\ndescribe('auction sniper test', () =>{\n\tvar sniper;\n\tvar sniperListener;\n\tvar auction;\n\tbefore('',() => {\n\t\tsniperListener = {\n\t\t\tsniperLost : sinon.spy(), \n\t\t\tsniperBidding : sinon.spy()\n\t\t};\n\t\tauction = {\n\t\t\tbid : sinon.spy()\n\t\t};\n\t\tsniper = new AuctionSniper(auction, sniperListener);\n\t});\n\n\tit('reports lost when auction closes', () => {\n\t\tsniper.auctionClosed();\n\t\tassert(sniperListener.sniperLost.calledOnce, 'sniperListener.sniperLost not called once');\n\t});\n\n\tit('bids higher and reports bidding when new price arrives', () => {\n\t\tlet price = 1001;\n\t\tlet increment = 25;\n\t\tsniper.currentPrice(price, increment);\n\t\tassert(auction.bid.calledOnce, 'auction.bid not called once');\n\t\tassert(auction.bid.calledWith(price + increment), 'auction.bid not called with '+price+','+increment);\n\t\tassert(sniperListener.sniperBidding.called, 'sniperListener.sniperBidding not called at least once');\n\t});\n});"],"sourceRoot":"/source/"}