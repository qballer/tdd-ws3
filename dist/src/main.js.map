{"version":3,"sources":["main.js"],"names":[],"mappings":";;;;;;AAAA,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,EAAE,CAAC;;AAExC,IAAI,wBAAwB,GAAG,OAAO,CAAC,iCAAiC,CAAC,CAAC;AAC1E,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACjC,IAAI,GAAG,GAAG,OAAO,EAAE,CAAC;AACpB,IAAI,MAAM,CAAC;AACX,IAAI,MAAM,GAAG,SAAS,CAAC;AACvB,IAAI,KAAK,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;AACjC,IAAI,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClC,IAAI,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;AAE/B,IAAM,WAAW,GAAG,IAAI,CAAC;;AAEzB,IAAI,MAAM,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;;IAE5B,cAAc;UAAd,cAAc;wBAAd,cAAc;;;cAAd,cAAc;;SACT,sBAAE;AACX,SAAM,GAAG,MAAM,CAAC;GAChB;;;QAHI,cAAc;;;IAMd,oBAAoB;AACd,UADN,oBAAoB,CACb,cAAc,EAAC;wBADtB,oBAAoB;;AAExB,MAAI,CAAC,cAAc,GAAG,cAAc,CAAC;EACrC;;cAHI,oBAAoB;;SAIZ,yBAAG;AACf,OAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;GACjC;;;SAEW,sBAAC,KAAK,EAAE,SAAS,EAAE;AAC9B,SAAM,GAAG,SAAS,CAAC;;AAEnB,SAAM,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,EAAC,KAAK,EAAC,KAAK,EAAE,KAAK,EAAE,KAAK,GAAG,SAAS,AAAC,EAAE,MAAM,EAAC,QAAQ,EAAC,CAAC,CAAC,CAAC;;GAEvG;;;QAbI,oBAAoB;;;AAgB1B,SAAS,IAAI,GAAE;AACd,OAAM,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;AACpC,KAAI,UAAU,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;AACtC,KAAI,QAAQ,GAAG,IAAI,oBAAoB,CAAC,IAAI,cAAc,EAAE,CAAC,CAAC;AAC9D,KAAI,wBAAwB,GAAG,IAAI,wBAAwB,CAAC,QAAQ,CAAC,CAAC;AACtE,WAAU,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;;AAElC,WAAU,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,OAAO,EAAE,GAAG,EAAK;AAC1C,0BAAwB,CAAC,cAAc,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;EAC1D,CAAC,CAAC;;AAEH,IAAG,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,GAAG,EAAE,GAAG,EAAE;AAChC,KAAG,CAAC,IAAI,mCAAiC,MAAM,0BAAuB,CAAC;EACvE,CAAC,CAAC;AACH,OAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,YAAY;AACrC,MAAI,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC;AACpC,MAAI,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;;AAEjC,SAAO,CAAC,GAAG,CAAC,uCAAuC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;EACjE,CAAC,CAAC;CACH;;AAED,IAAI,EAAE,CAAC","file":"main.js","sourcesContent":["require('source-map-support').install();\n\nvar AuctionMessageTranslator = require('../src/AuctionMessageTranslator');\nvar express = require('express');\nvar app = express();\nvar server;\nvar status = 'joining';\nvar redis = require('then-redis')\nvar itemToSnipe = process.argv[3];\nvar sniperId = process.argv[2];\n\nconst UNUSED_CHAT = null;\n\nvar client = redis.createClient();\n\nclass SniperListener{\n\tsniperLost(){\n\t\tstatus = 'lost';\n\t}\n}\n\nclass AuctionEventListener {\n\tconstructor(sniperListener){\n\t\tthis.sniperListener = sniperListener;\n\t}\n\tauctionClosed() {\n\t\tthis.sniperListener.sniperLost();\n\t}\n\n\tcurrentPrice(price, increment) {\n\t\tstatus = 'bidding';\n\t\t//if (sniperId !== parsed.bidder){\n\t\tclient.publish(itemToSnipe, JSON.stringify({event:'bid', price:(price + increment), bidder:sniperId}));\n\t\t//}\n\t}\n}\n\nfunction main(){\n\tclient.publish(itemToSnipe, 'join');\n\tvar subscriber = redis.createClient();\n\tvar listener = new AuctionEventListener(new SniperListener());\n\tvar auctionMessageTranslator = new AuctionMessageTranslator(listener);\n\tsubscriber.subscribe(itemToSnipe);\n\t\n\tsubscriber.on('message', (channel, msg) => {\n\t\tauctionMessageTranslator.processMessage(UNUSED_CHAT, msg);\n\t});\n\t\n\tapp.get('/', function (req, res) {\n\t\tres.send(`<html><body><div id=\"status\">${status}</div></body></html>`);\n\t});\n\tserver = app.listen(8888, function () {\n\t\tvar host = server.address().address;\n\t\tvar port = server.address().port;\n\n\t\tconsole.log('Example app listening at http://%s:%s', host, port);\n\t}); \n}\n\nmain();\n\n"],"sourceRoot":"/source/"}